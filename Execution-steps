Step-1->
    Create below files
   - main.tf,
   - providers.tf,
   - terraform.tfvars,
    -variable.tf
Step-2->
  terraform init
  Note-What initialzation does?
      It downloads the provider like aws,azure if it doesnot have.
Step-3->
  terraform plan -out {anyname}.tfpl
  
  Will looking into the current configuration files and load the varibales(tfvars)
  -out -> to store the plan

Environment Variables
Simple values
$ export TF_VAR_image_id=ami-abc123
Complex-typed Values
$ export TF_VAR_availability_zone_names='["us-west-1b","us-west-1d"]'
$ terraform plan -out {anyname}.tfpl


Step-4-> Create the resources from output plan

  --- terraform apply {anyname}.tfpl

  --- terraform apply -var-file="testing.tfvars" {anyname}.tfpl

Output:
State path: terraform.tfstate
Creates a state file 
terraform destory {file}.tfstate-it delete all the resources created using this state file

Note->
Terraform loads variables in the following order, with later sources taking precedence over earlier ones:

Environment variables
The terraform.tfvars file, if present.
The terraform.tfvars.json file, if present.
Any *.auto.tfvars or *.auto.tfvars.json files, processed in lexical order of their filenames.
Any -var and -var-file options on the command line, in the order they are provided. (This includes variables set by a Terraform Cloud workspace.)

Terraform Provisioners->
Postdeployment configuration 
Post deployment Configruation Management Software -Puppet,Chef
Move resources from Local to Remote
Provisioner examples:
file
local-exec
remote-exec
provisioner "file"{
connection {
    type = "ssh"
    user = "root"
    }
    source = ""
    destination = ""
}
}
provisioer "local-exec"{
}
